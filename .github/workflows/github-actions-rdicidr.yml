name: CI rdicidr

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 15.x ]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install dependencies 
        run: npm install
      
      - name: Linter (ESLint)
        run: npm run lint

      - name: Formatter (Prettier)
        run: npm run prettier

      - name: Test (Jest)
        run: npm run test

      - name: Build
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Build, tag and push image to ECR
        env:
          ECR_REGISTRY: public.ecr.aws/l7r0b8r4/rdicidr-test
          IMAGE_TAG: latest
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/l7r0b8r4
          docker build -t rdicidr-test .
          docker tag rdicidr-test:latest $ECR_REGISTRY:$IMAGE_TAG
          docker push $ECR_REGISTRY:$IMAGE_TAG
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        passphrase: ${{ secrets.KEYPAIR_SERVER }}
        port: 22
        script: docker rm -f $(docker ps -aq --filter name=rdicidr-test) ; docker run -d -p 8080:80 --restart=always --name rdicidr-test public.ecr.aws/l7r0b8r4/rdicidr-test
